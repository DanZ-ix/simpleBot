import re
import time
from datetime import datetime, timedelta
from loader import types, mongo_conn


# TODO –ê–¥—Å–∫–∏–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
class aio_keyboard:

    async def subscribe_channel(self, user_id, ch, ch1):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        if ch:
            url, text = re.search(r'href=\"(.*)\">(.*)<', ch).groups()
            keyboard.add({'text': text, 'url': url})
        if ch1:
            url1, text1 = re.search(r'href=\"(.*)\">(.*)<', ch1).groups()
            keyboard.add({'text': text1, 'url': url1})

        keyboard.add({'text': '–ì–æ—Ç–æ–≤–æ ‚úÖ', 'callback_data': 'check_channels'})
        return keyboard

    async def get_courses(self):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*[
            {'text': 'ü¶æ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º', 'url': 'https://www.puwdtw.ru/click?pid=32319&offer_id=1574'},
            {'text': 'ü§Ø –ú–µ–Ω–µ–¥–∂–µ—Ä –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤', 'url': 'https://www.puwdtw.ru/click?pid=32319&offer_id=1509'},
            {'text': 'ü§ü –ù–∞—Å—Ç—Ä–æ–π—â–∏–∫ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–µ–∫–ª–∞–º—ã', 'url': 'https://www.puwdtw.ru/click?pid=32319&offer_id=1293'},
            {'text': 'üßö –î–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤', 'url': 'https://www.puwdtw.ru/click?pid=32319&offer_id=925'},
        ])
        return keyboard

    async def select_neural_net(self):
        keyboard = types.InlineKeyboardMarkup(row_width=2)

        keyboard.add(*[
            {'text': 'ChatGPT', 'callback_data': 'gpt_chat'},
            {'text': 'Midjorney', 'callback_data': f'imagine'}
        ])
        keyboard.add({'text': 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'callback_data': 'get_profile'})

        return keyboard

    async def get_accounts_gpt(self):
        keyboard = types.InlineKeyboardMarkup(row_width=2)

        count_gpt_tokens = await mongo_conn.db.accounts.count_documents({'type': 'gpt'})
        t, arr = f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è GPT –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, —Å–µ–π—á–∞—Å {count_gpt_tokens} —Ç–æ–∫–µ–Ω(-–∞, -–æ–≤)', []

        keyboard.add(*[
            {'text': '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º', 'callback_data': 'add_acc_text'},
            {'text': '–î–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Ñ–∞–π–ª', 'callback_data': f'add_acc_file'}
        ])

        return t, keyboard

    async def call_gpt(self):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, is_persistent=True)
        keyboard.add(*[
            {'text': '–ù–∞—á–∞—Ç—å —á–∞—Ç', 'callback_data': '–ù–∞—á–∞—Ç—å —á–∞—Ç'}
            # ,{'text': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã', 'callback_data': f'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã'}
        ])
        return keyboard

    async def get_accounts_imagine(self, acc_id=''):
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        t, mode_select, arr, max_generate = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:', '', [], 0

        async for acc in mongo_conn.db.accounts.find({'type': 'midjourney'}):
            mode = acc.get('mode')
            if acc_id == acc['id']:
                now = acc['date']
                max_generate = acc.get('max_generate') and acc['max_generate'] or 1
                date = f'{now.hour}:{now.minute}:{now.second} {now.day}/{now.month}/{now.year}'
                mode_select = acc.get('mode')
                t = f'–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {date}\n–Æ–∑–µ—Ä–∏–º—è: {acc["username"]}\n–ü–æ—á—Ç–∞: {acc["email"]}\n–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode and mode or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"}\nID –∫–∞–Ω–∞–ª–∞ —Å –±–æ—Ç–æ–º: {acc.get("dc_bot_id") and acc["dc_bot_id"] or "–Ω–µ—Ç"}'
                arr.append({'text': f'‚úÖ {acc["username"]}', 'callback_data': f'select:{acc["id"]}'})
            else:
                arr.append({'text': f'{mode == "fast" and "‚ö° " or ""}{acc["username"]}',
                            'callback_data': f'select:{acc["id"]}'})

        keyboard.add(*arr)

        if acc_id:
            keyboard.add(
                {'text': f'–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {max_generate}', 'callback_data': f'edit_max_generate:{acc_id}'})
            keyboard.add(*[
                {'text': mode_select == 'fast' and '‚úÖ Fast mode' or 'Fast mode',
                 'callback_data': f'mode:fast:{acc_id}'},
                {'text': mode_select == 'relax' and '‚úÖ Relax mode' or 'Relax mode',
                 'callback_data': f'mode:relax:{acc_id}'}
            ])
            # keyboard.add({'text': '–î–æ–±–∞–≤–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ —Å –±–æ—Ç–æ–º', 'callback_data': f'add_bot_id:{acc_id}'})

        keyboard.add(*[
            {'text': '–î–æ–±–∞–≤–∏—Ç—å', 'callback_data': 'new_acc:'},
            {'text': acc_id and '–£–¥–∞–ª–∏—Ç—å' or '', 'callback_data': f'del_acc:{acc_id}'}
        ])

        keyboard.add({'text': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'callback_data': 'settings_acc'})

        return t, keyboard

    async def settings_for_dc(self, account_number):
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        sett = await mongo_conn.db.settings.find_one({'admin': True})

        if not sett:
            sett = {'admin': True, 'mode': {'fast': {'min_queues': 30, 'max_queues': 100, 'time_wait': 5},
                                            'relax': {'min_queues': 1, 'max_queues': 30, 'time_wait': 15}},
                    'account': account_number}
            await mongo_conn.db.settings.insert_one(sett)

        t = f'–ú–∞–∫—Å. –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è <b>Fast</b>: {sett["mode"]["fast"]["time_wait"]} –º–∏–Ω.\n–ú–∞–∫—Å. –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è <b>Relax</b>: {sett["mode"]["relax"]["time_wait"]} –º–∏–Ω.\n\n<strong>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</strong>'

        keyboard.add({'text': '–ú–∞–∫—Å. –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ fast —Ä–µ–∂–∏–º–∞', 'callback_data': 'time_wait:fast'})
        keyboard.add({'text': '–ú–∞–∫—Å. –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ relax —Ä–µ–∂–∏–º–∞', 'callback_data': 'time_wait:relax'})

        keyboard.add({'text': '–ù–∞–∑–∞–¥', 'callback_data': 'exit_settings'})
        return t, keyboard

    async def get_save_keyboard(self, buttons, select_callback_data=''):
        keyboard = types.InlineKeyboardMarkup(row_width=5)
        arr = []

        for butt in buttons:
            if select_callback_data != butt['callback_data']:
                arr.append(butt)
            else:
                arr.append({'text': f"‚úî {butt['text']}", 'callback_data': butt['callback_data']})

        keyboard.add(*arr)

        return keyboard, arr

    async def get_queues(self, update=False, type=''):
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        t, i = '–°–µ–π—á–∞—Å –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç', 0

        users_all = await mongo_conn.db.users.count_documents({})

        pre_day = datetime.now() - timedelta(days=1)
        new_users_day = await mongo_conn.db.users.count_documents({'date': {'$gt': pre_day}})

        pre_week = datetime.now() - timedelta(days=7)
        new_users_week = await mongo_conn.db.users.count_documents({'date': {'$gt': pre_week}})

        pre_month = datetime.now() - timedelta(days=30)
        new_users_month = await mongo_conn.db.users.count_documents({'date': {'$gt': pre_month}})

        queues, count_active_queues, count_active_relax_queues, count_active_fast_queues = [], 0, 0, 0
        async for queue in mongo_conn.db.queues.find({'type': type}):
            queues.append(queue)
            if queue.get('request') == True and type == 'midjorney':
                count_active_queues += 1

            if queue.get('status') == 'process' and type == 'gpt':
                count_active_queues += 1

        keyboard.add({'text': 'üîÅ –û–±–Ω–æ–≤–∏—Ç—å', 'callback_data': 'queues_update'})
        keyboard.add(*[
            {'text': type == 'gpt' and '‚úÖ chatGPT' or 'chatGPT', 'callback_data': 'select_gpt'},
        ])
        if queues:

            t = f'{update and f"[<code>{datetime.fromtimestamp(int(time.time()))}</code>]" or ""}\n\n–û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n'
            for queue in queues[-10:]:
                user = mongo_conn.users[queue["user_id"]]
                tag = f'<a href="tg://user?id={queue["user_id"]}">{user["fullname"]}</a> {user["username"] and "@" + user["username"] or ""}'
                i += 1

                m = queue.get("mode") != None and queue["mode"] + f", {queue.get('acc_username')}, " or ""
                if i < 10:
                    t += f'{i}. {tag}: <b>{queue["type"] == "midjorney" and queue["query"] or queue["query"][0:20] + "..."}</b> ({queue["type"] == "midjorney" and m or ""}–æ–∂–∏–¥–∞–µ—Ç {int(time.time()) - queue["start_time"]} —Å–µ–∫.)\n'
                else:
                    queue = queues[-1]
                    t += f'.....\n{len(queues)}. {tag} ({queue["type"] == "midjorney" and m or ""}–æ–∂–∏–¥–∞–µ—Ç {int(time.time()) - queue["start_time"]} —Å–µ–∫.)'
                    break

        t += f'\n\n–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {count_active_queues}'
        t += f'\n\n–í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤: {users_all}\n–ù–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å: {new_users_day}\n–ù–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}\n–ù–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {new_users_month}\n'

        return keyboard, t

    async def variant_add_account(self):
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*[
            {'text': 'GPT –∞–∫–∫–∞—É–Ω—Ç—ã', 'callback_data': 'gpt_add_acc'},
        ])
        return keyboard

    async def start_chat(self, type='gpt', v='', ratio=''):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)

        if type == 'gpt':
            keyboard.add('–ù–∞–∑–∞–¥')

        if type == 'midjourney' and v and ratio:
            keyboard.add(*[f'–í–µ—Ä—Å–∏—è: {v}', f'–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {ratio}'])
            keyboard.add('–ùa–∑–∞–¥')

        var, var_full = [], []
        if v and not ratio:
            versions = ['v4', 'v5']

            for ver in versions:
                if ver == v:
                    var.append(f'‚úÖ {ver}')
                else:
                    var.append(ver)
            keyboard.add(*var)

        if ratio and not v:
            versions = ['1:1', '2:3', '3:2', '4:7', '5:4', '7:4', '16:9']

            for ver in versions:
                if ver == ratio:
                    var.append(f'‚úÖ {ver}')
                else:
                    var.append(ver)

                if len(var) > 3:
                    keyboard.add(*var)
                    var = []
            if var:
                keyboard.add(*var)

        return keyboard

    async def set_dialog(self, dialog):
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add({'text': dialog and '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥' or '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥', 'callback_data': 'set_dialog'})
        return keyboard

    async def ban_list_settings(self):
        keyboard = types.InlineKeyboardMarkup(row_width=2)

        try:
            count_ban_list = await mongo_conn.db.banlist.count_documents()
        except:
            count_ban_list = 0

        t, arr = f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤: {count_ban_list}', []

        keyboard.add(*[
            {'text': '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º', 'callback_data': 'add_banlist_text'},
            {'text': '–î–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Ñ–∞–π–ª', 'callback_data': f'add_banlist_file'}
        ])

        return t, keyboard

    async def get_free_attempts(self):
        keyboard = types.InlineKeyboardMarkup(row_width=1)

        return keyboard

    async def get_variants_free_attempts(self):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*[
            {'text': '–ü–æ–ª—É—á–∏—Ç—å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É', 'callback_data': f'subscribe_channel'},
            {'text': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', 'callback_data': f'invite_friend'}
        ])

        return keyboard

    async def get_variants_pay_attempts(self):
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*[
            {'text': '25 —à—Ç. - 199‚ÇΩ', 'callback_data': f'buy_attempts:25:199'},
            {'text': '50 —à—Ç. - 359‚ÇΩ', 'callback_data': f'buy_attempts:50:359'},
            {'text': '100 —à—Ç. - 499‚ÇΩ', 'callback_data': f'buy_attempts:100:499'},
            {'text': '200 —à—Ç. - 899‚ÇΩ', 'callback_data': f'buy_attempts:200:899'}
        ])

        return keyboard

    async def payment_url(self, url):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*[
            {'text': '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', 'url': url}
        ])

        return keyboard

    async def get_buttons_edit_mail(self, user_data, buttons, select_button='', mailing=False, preview=False,
                                    not_url=False):
        max_rows = user_data.get('max_rows') or 2
        keyboard = types.InlineKeyboardMarkup(row_width=max_rows)
        arr = []

        if buttons and not not_url:
            for butt in buttons:
                arr.append({'text': butt['text'], 'url': butt['url']})

        keyboard.add(*arr)

        if not preview:
            keyboard.add({'text': '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ', 'callback_data': 'edit_command'})
            keyboard.add({'text': '–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', 'callback_data': f'new_buttons'})

            keyboard.add(*[
                {'text': user_data.get('photo') and '–£–¥–∞–ª–∏—Ç—å üì∑' or '', 'callback_data': f'del_photo'},
                {'text': user_data.get('video') and '–£–¥–∞–ª–∏—Ç—å üìπ' or '', 'callback_data': f'del_video'},
                {'text': '–£–¥–∞–ª–∏—Ç—å –≤—Å—ë' or '', 'callback_data': f'del_all'}
            ])

            keyboard.add(*[
                {'text': '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', 'callback_data': f'preview_mode'},
                {'text': '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'callback_data': f'start_mailing'}
            ])
            keyboard.add({'text': '–ê–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞', 'callback_data': f'start_admin_mail'})
        else:
            if not mailing:
                keyboard.add({'text': 'üìù –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞', 'callback_data': 'edit_mode'})

        return keyboard

    async def variants_subscribe_to_channels(self, user_get_channel=False, select_channel_id='', filters_channels=None):
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        t, count = user_get_channel == False and '–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –≤ Midjourney' or '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å n –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è midjourney - –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª', 0
        async for channel in mongo_conn.db.channels_subscribe.find():
            if filters_channels:
                if channel['id'] in filters_channels:
                    continue

            if str(channel['id']) == str(select_channel_id):
                t = f'ID –∫–∞–Ω–∞–ª–∞: <code>{channel["id"]}</code>\n–ù–∞–∑–≤–∞–Ω–∏–µ: {channel["title"]}\n–°—Å—ã–ª–∫–∞: {channel["link"]}'
                keyboard.add({'text': f"‚úÖ {channel['title']}", 'callback_data': f'get_ch:{channel["id"]}'})
            else:
                count += 1
                if not user_get_channel:
                    keyboard.add({'text': channel['title'], 'callback_data': f'get_ch:{channel["id"]}'})
                else:
                    if 't.me' in channel['link']:
                        keyboard.add({'text': channel['title'], 'url': channel['link']})

        if not user_get_channel:
            keyboard.add(*[
                {'text': select_channel_id and '–£–¥–∞–ª–∏—Ç—å' or '', 'callback_data': f'del_ch:{select_channel_id}'},
                {'text': '–î–æ–±–∞–≤–∏—Ç—å', 'callback_data': f'add_ch'}
            ])
            keyboard.add(*[
                {'text': '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É', 'callback_data': f'edit_link:{select_channel_id}'},
                {'text': '–†–∞—Å—Å—ã–ª–∫–∞', 'callback_data': f'mailing:{select_channel_id}'}
            ])

        else:
            keyboard.add({'text': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'callback_data': f'check_subscribe'})

        if count == 0 and user_get_channel:
            t = ''

        return t, keyboard

    async def variants_subscribe_necessary_to_channels(self, user_get_channel=False, key_channel_id='',
                                                       filters_channels=None):
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        id, t, count, arr = '', '–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏', 0, []

        repeat_ch = {}
        async for channel in mongo_conn.db.channels_necessary_subscribe.find():
            if repeat_ch.get(channel['id']) == None:
                repeat_ch[channel['id']] = 0
            repeat_ch[channel['id']] += 1

            if filters_channels:
                if channel['id'] in filters_channels:
                    continue

            if channel['key'] == str(key_channel_id):
                t = f'ID –∫–∞–Ω–∞–ª–∞: <code>{channel["id"]}</code>\n–ù–∞–∑–≤–∞–Ω–∏–µ: {channel["title"]} {repeat_ch[channel["id"]] > 1 and repeat_ch[channel["id"]] or ""}\n–°—Å—ã–ª–∫–∞: {channel["link"]}\n–°—Å—ã–ª–∫–∞ –¥–ª—è –±–æ—Ç–∞: <code>{channel.get("bot_link") or "–Ω–µ—Ç"}</code>'
                id = channel['id']
                arr.append(
                    {'text': f"‚úÖ {channel['title']} {repeat_ch[channel['id']] > 1 and repeat_ch[channel['id']] or ''}",
                     'callback_data': f'get_ch:{channel["key"]}'})
            else:
                count += 1
                if not user_get_channel:
                    arr.append({
                                   'text': f"{channel['title']} {repeat_ch[channel['id']] > 1 and repeat_ch[channel['id']] or ''}",
                                   'callback_data': f'get_ch:{channel["key"]}'})
                else:
                    keyboard.add({'text': channel['title'], 'url': channel['link']})

        if arr:
            keyboard.add(*arr)

        if not user_get_channel:
            keyboard.add(*[
                {'text': key_channel_id and '–£–¥–∞–ª–∏—Ç—å' or '', 'callback_data': f'del_ch:{key_channel_id}'},
                {'text': '–î–æ–±–∞–≤–∏—Ç—å', 'callback_data': f'add_ch'}
            ])
            keyboard.add(*[
                {'text': '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É', 'callback_data': f'edit_link:{key_channel_id}'},
                {'text': '–°—Å—ã–ª–∫–∞ –¥–ª—è –±–æ—Ç–∞', 'callback_data': f'url_to_bot:{key_channel_id}'}
            ])
            keyboard.add({'text': '–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª', 'callback_data': f'double_—Åh:{id}:{key_channel_id}'})

        else:
            keyboard.add({'text': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'callback_data': f'check_subscribe'})

        if count == 0 and user_get_channel:
            t = ''

        return t, keyboard

    async def get_attempt_to_subs_channel(self):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add({'text': '–ü–æ–ª—É—á–∏—Ç—å', 'callback_data': 'open_attempt_variants'})
        return keyboard

    async def set_notify_to_subscribe_channel(self):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add({'text': '–£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–≤—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö', 'callback_data': 'notify_attempt_variants'})
        return keyboard


keyboard = aio_keyboard()
